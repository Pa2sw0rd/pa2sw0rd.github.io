{"title":"记一次网课系统的刷课分析","uid":"fce6f71914c33e6d9ddde60a988dbbf2","slug":"jycwkfx","date":"2022-12-05T12:38:06.000Z","updated":"2023-08-22T12:52:41.514Z","comments":true,"path":"api/articles/jycwkfx.json","keywords":null,"cover":"https://images.unsplash.com/photo-1533709752211-118fcaf03312?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxfDB8MXxyYW5kb218MHx8aGFja2VyfHx8fHx8MTY5MjcwODc0NQ&ixlib=rb-4.0.3&q=80&utm_campaign=api-credit&utm_medium=referral&utm_source=unsplash_source&w=1080","content":"<h2 id=\"0x00前言\"><a href=\"#0x00前言\" class=\"headerlink\" title=\"0x00前言\"></a>0x00前言</h2><p>        在一个夜黑风高的夜晚，表哥不想上网课了，看看有没有办法刷刷课，那就看看呗，开整。<img src=\"http://static.pa2sw0rd.cn/static/images/image-8.png\"></p>\n<p>        本以为调调前端，看看接口就能搞定，但查看一番，该系统使用一个叫silverlight的微软.net插件开发的，居然还要IE浏览器，可手上都是win11，哪来的IE浏览器，这是看都不让看啊。</p>\n<h2 id=\"0x01环境搭建\"><a href=\"#0x01环境搭建\" class=\"headerlink\" title=\"0x01环境搭建\"></a>0x01环境搭建</h2><p>        使用chrome的IE插件，可以是可以，但是连F12都摁不了，请求包都看不到。Edge开启IE兼容模式，发现和chrome一样，也是啥也看不到，设置浏览器代理也抓不到包。</p>\n<img src=\"http://static.pa2sw0rd.cn/static/images/2022-12-05-16-12-47-image.png\">\n\n<p>干脆直接抓edge进程流量，这里使用proxifire转发至bp</p>\n<img src=\"http://static.pa2sw0rd.cn/static/images/2022-12-05-16-20-12-image.png\">\n\n<p>刷新，舒服了，终于有请求了～～～</p>\n<h2 id=\"0x02网课协议分析\"><a href=\"#0x02网课协议分析\" class=\"headerlink\" title=\"0x02网课协议分析\"></a>0x02网课协议分析</h2><p>        查看几条请求包，发现此系统都是一个接口，通过xml来交互，可能这就是silverlight的特性吧。我们重点是要看看能不能挂机刷课或者直接一键完成，毕竟这可不是单纯的前端，一堆中途验证不能直接去除，经过观察，发现一条关键请求。</p>\n<img src=\"http://static.pa2sw0rd.cn/static/images/2022-12-05-16-51-42-image.png\">\n\n<p>        顾名思义，保存当前视频学习进度，以为改个progress字段一梭子过去就成功了，可是没想到是一点反应都没有啊，学习进度是一点都没变啊。</p>\n<img src=\"http://static.pa2sw0rd.cn/static/images/image-9.png\">\n\n<p>        继续观察，发现每次请求的credential字段都在变，猜测里面带了时间，以为老系统仅仅是base64，一手decode，没想到是密文。</p>\n<img src=\"http://static.pa2sw0rd.cn/static/images/image-10.png\">\n\n<p>        silverlight不是前端js加密，一手谷歌，发现可以反编译silverlight资源，在html源码中搜索”.xap”，下载之～</p>\n<img src=\"http://static.pa2sw0rd.cn/static/images/2022-12-05-17-06-46-image.png\">\n\n<p>        将xap改为zip，解压，既然是.net，就用dnspy进行反编译，因为没接触过silverlight，打开后一堆代码，不清楚文件结构，直接搜索credential关键字，最终还是定位到了关键代码。</p>\n<p>发现是aes加密，这里确实是带了时间戳，怪不得每次请求都不一样</p>\n<img src=\"http://static.pa2sw0rd.cn/static/images/2022-12-05-17-11-52-image.png\">\n\n<p>密钥和盐也都是在的。</p>\n<img src=\"http://static.pa2sw0rd.cn/static/images/2022-12-05-17-12-58-image.png\">\n\n<p>        本来打算用python搞个脚本解密看看对不对先，没想到代码里带了一些东西，并不是使用库带个密钥就能解，也是懒得看了，既然是.net程序，正好手上有.net开发环境，直接cv大法，将加解密代码直接复制到一个.net项目，如果缺少的话就直接引用，没想到都是c#自身的库，那就好办了，直接实现加解密。</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">internal class utils\n    &#123;\n        public static string AesEncrypt(string input, string password, string salt)\n        &#123;\n            byte[] bytes &#x3D; Encoding.UTF8.GetBytes(input);\n            byte[] bytes2 &#x3D; Encoding.UTF8.GetBytes(salt);\n            string result;\n            using (AesManaged aesManaged &#x3D; new AesManaged())\n            &#123;\n                Rfc2898DeriveBytes rfc2898DeriveBytes &#x3D; new Rfc2898DeriveBytes(password, bytes2);\n                aesManaged.BlockSize &#x3D; aesManaged.LegalBlockSizes[0].MaxSize;\n                aesManaged.KeySize &#x3D; aesManaged.LegalKeySizes[0].MaxSize;\n                aesManaged.Key &#x3D; rfc2898DeriveBytes.GetBytes(aesManaged.KeySize &#x2F; 8);\n                aesManaged.IV &#x3D; rfc2898DeriveBytes.GetBytes(aesManaged.BlockSize &#x2F; 8);\n                using (ICryptoTransform cryptoTransform &#x3D; aesManaged.CreateEncryptor())\n                &#123;\n                    MemoryStream memoryStream &#x3D; new MemoryStream();\n                    using (CryptoStream cryptoStream &#x3D; new CryptoStream(memoryStream, cryptoTransform, (CryptoStreamMode)1))\n                    &#123;\n                        cryptoStream.Write(bytes, 0, bytes.Length);\n                    &#125;\n                    result &#x3D; Convert.ToBase64String(memoryStream.ToArray());\n                &#125;\n            &#125;\n            return result;\n        &#125;\n        public static string AesDecrypt(string input, string password, string salt)\n        &#123;\n            byte[] array &#x3D; Convert.FromBase64String(input);\n            byte[] bytes &#x3D; Encoding.UTF8.GetBytes(salt);\n            string @string;\n            using (AesManaged aesManaged &#x3D; new AesManaged())\n            &#123;\n                Rfc2898DeriveBytes rfc2898DeriveBytes &#x3D; new Rfc2898DeriveBytes(password, bytes);\n                aesManaged.BlockSize &#x3D; aesManaged.LegalBlockSizes[0].MaxSize;\n                aesManaged.KeySize &#x3D; aesManaged.LegalKeySizes[0].MaxSize;\n                aesManaged.Key &#x3D; rfc2898DeriveBytes.GetBytes(aesManaged.KeySize &#x2F; 8);\n                aesManaged.IV &#x3D; rfc2898DeriveBytes.GetBytes(aesManaged.BlockSize &#x2F; 8);\n                using (ICryptoTransform cryptoTransform &#x3D; aesManaged.CreateDecryptor())\n                &#123;\n                    MemoryStream memoryStream &#x3D; new MemoryStream();\n                    using (CryptoStream cryptoStream &#x3D; new CryptoStream(memoryStream, cryptoTransform, (CryptoStreamMode)1))\n                    &#123;\n                        cryptoStream.Write(array, 0, array.Length);\n                    &#125;\n                    byte[] array2 &#x3D; memoryStream.ToArray();\n                    @string &#x3D; Encoding.UTF8.GetString(array2, 0, array2.Length);\n                &#125;\n            &#125;\n            return @string;\n        &#125;\n    &#125;</code></pre>\n\n<img src=\"http://static.pa2sw0rd.cn/static/images/2022-12-05-18-18-46-image.png\">\n\n<p>        那么现在是不是可以随意刷课了呢？答案是：不能!<img src=\"http://static.pa2sw0rd.cn/static/images/image-11.png\"></p>\n<p>        即使修改时间重新构造请求包，响应也是一样，学习进度也是一点都没变，再回头去看请求包，这时注意到了一个字段type，将它改为1，发现响应不一样。</p>\n<img src=\"http://static.pa2sw0rd.cn/static/images/2022-12-05-18-33-05-image.png\">\n\n<p>虽然失败了，但是至少有变化了，再此分析，通过不断调整credential及progress字段，最后终于验证：credential里的时间跟学习进度没关系，花这么大功夫，搁这耍流氓呢！</p>\n<img src=\"http://static.pa2sw0rd.cn/static/images/image-12.png\">\n\n<p>        经过多次尝试，发现服务端只记录请求时间，只要两次请求时间间隔和progress相差不超过一分钟就可以，那意思是只能刷课了？肯定不能啊，那我要是只请求一次，且第一次传的时长等于整个视频时长呢，正好获取课程接口会返回视频时长</p>\n<img src=\"http://static.pa2sw0rd.cn/static/images/2022-12-05-18-51-30-image.png\">\n\n<p>那当然是直接100%，哈哈哈，只要思路广，没有网课跳不了。</p>\n","feature":true,"text":"0x00前言 在一个夜黑风高的夜晚，表哥不想上网课了，看看有没有办法刷刷课，那就看看呗，开整。 本以为调调前端，看看接口就能搞定，但查看一番，该系统使用一个叫s...","link":"","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"安全","slug":"安全","count":2,"path":"api/categories/安全.json"},{"name":"逆向","slug":"安全/逆向","count":1,"path":"api/categories/安全/逆向.json"},{"name":"逆向","slug":"逆向","count":1,"path":"api/categories/逆向.json"},{"name":"C#","slug":"逆向/C","count":1,"path":"api/categories/逆向/C.json"}],"tags":[{"name":"逆向","slug":"逆向","count":1,"path":"api/tags/逆向.json"},{"name":"c#","slug":"c","count":1,"path":"api/tags/c.json"},{"name":"刷课","slug":"刷课","count":1,"path":"api/tags/刷课.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x00%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">0x00前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x01%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA\"><span class=\"toc-text\">0x01环境搭建</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x02%E7%BD%91%E8%AF%BE%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90\"><span class=\"toc-text\">0x02网课协议分析</span></a></li></ol>","author":{"name":"Pa2sw0rd","slug":"blog-author","avatar":"http://static.pa2sw0rd.cn/static/images/pa2sw0rd.webp","link":"/","description":"一位正在重塑知识的技术人 <br /> @ <b>公众号：Pa2sw0rd</b>","socials":{"github":"https://github.com/Pa2sw0rd","twitter":"https://twitter.com/pa2sword","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"link":"https://live.bilibili.com/22619211"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"Hello World","uid":"b9663f58f18133b35bfe243f3e916a80","slug":"hello-world","date":"2023-08-21T08:56:56.217Z","updated":"2023-08-21T08:56:56.217Z","comments":true,"path":"api/articles/hello-world.json","keywords":null,"cover":null,"text":"Welcome to Hexo! This is your very first post. Check documentation for more info...","link":"","photos":[],"count_time":{"symbolsCount":440,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Pa2sw0rd","slug":"blog-author","avatar":"http://static.pa2sw0rd.cn/static/images/pa2sw0rd.webp","link":"/","description":"一位正在重塑知识的技术人 <br /> @ <b>公众号：Pa2sw0rd</b>","socials":{"github":"https://github.com/Pa2sw0rd","twitter":"https://twitter.com/pa2sword","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"link":"https://live.bilibili.com/22619211"}}}},"feature":true},"next_post":{"title":"路上的优盘不要捡！硬核打造BadUSB近源渗透神器，一秒上线MSF！","uid":"68207a8407ad9919ae03a48d7f395abc","slug":"bad_usb","date":"2022-05-24T07:59:24.000Z","updated":"2023-08-22T12:29:52.900Z","comments":true,"path":"api/articles/bad_usb.json","keywords":null,"cover":"https://images.unsplash.com/photo-1544731612-de7f96afe55f?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxfDB8MXxyYW5kb218MHx8Y3VtcHV0ZXIsaGFyZHdhcmV8fHx8fHwxNjkyNzA3MTIz&ixlib=rb-4.0.3&q=80&utm_campaign=api-credit&utm_medium=referral&utm_source=unsplash_source&w=1080","text":"简介&emsp; &emsp; 近期拿出吃灰的stm32f407开发板，研究学习一下hid设备的开发，来实现一个低成本的badusb，本文使用开发板来进行测试，...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"安全","slug":"安全","count":2,"path":"api/categories/安全.json"},{"name":"硬件","slug":"安全/硬件","count":1,"path":"api/categories/安全/硬件.json"}],"tags":[{"name":"硬件","slug":"硬件","count":1,"path":"api/tags/硬件.json"},{"name":"BadUSB","slug":"BadUSB","count":1,"path":"api/tags/BadUSB.json"}],"author":{"name":"Pa2sw0rd","slug":"blog-author","avatar":"http://static.pa2sw0rd.cn/static/images/pa2sw0rd.webp","link":"/","description":"一位正在重塑知识的技术人 <br /> @ <b>公众号：Pa2sw0rd</b>","socials":{"github":"https://github.com/Pa2sw0rd","twitter":"https://twitter.com/pa2sword","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"link":"https://live.bilibili.com/22619211"}}}},"feature":true}}