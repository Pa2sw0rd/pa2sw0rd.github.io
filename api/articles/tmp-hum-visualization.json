{"title":"温湿度数据可视化","uid":"b9dfc951b7f818ca7902fed80877a28b","slug":"tmp-hum-visualization","date":"2020-07-29T10:06:16.000Z","updated":"2023-08-27T14:58:26.886Z","comments":true,"path":"api/articles/tmp-hum-visualization.json","keywords":null,"cover":"https://images.unsplash.com/photo-1451187580459-43490279c0fa?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxfDB8MXxyYW5kb218MHx8aW90fHx8fHx8MTY5MzE0Nzk2Nw&ixlib=rb-4.0.3&q=80&utm_campaign=api-credit&utm_medium=referral&utm_source=unsplash_source&w=1080","content":"<p>这是一个帮一个学姐完善的毕业设计，由于她之前找人做的时候一次性付清了钱，导致后来导师要求加功能的时候卖家不理人，所以有了此文章(博客迁移，图不见了～)，来说一下实现的思路吧。</p>\n<p>他这个要求远程采集三个节点的温湿度数据，并通过终端节点通过串口发送到PC上，硬件电路，数据采集与zigbee组网商家已经实现了，我主要帮他在PC上实现一个数据可视化。</p>\n<p>首先想到了几个方案：1、写一个上位机，实时接收串口数据，利用画图组件描点连线，就OK了。2、直接用网页接受串口数据，用现成开源的echarts数据可视化库实现。3、搞个服务器，写几个接口，PC的上位机作为客户端连接服务器发送温湿度数据，服务器端用echarts实现数据可视化，用户可访问网页来查看数据。因为时间问题，只有一天，所以简单粗暴，不考虑那么多了，直接C#写个上位机，并建立websocket服务端，本地网页js连接websocket服务端进行数据的接收，再用echarts实现数据可视化，本来上位机打算用易语言，但是考虑是毕业设计，写在报告里有点傻*，所以就正式一点，用了C#。。。</p>\n<p>界面就不说了，几个常规组件，一个串口组件用来接收串口数据，系统串口检索直接使用api-GetPortNames获取系统串口列表，然后依次遍历并实例化每个串口对象，串口列表遍历代码如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">private void MyInit()\n        &#123;\n            this.serialPorts &#x3D; new List&lt;SerialPort&gt;();\n            this.portNames &#x3D; SerialPort.GetPortNames();\n            this.portBuffer &#x3D; new byte[1000];\n            if (this.portNames.Length &gt; 1)\n            &#123;\n                for (int i &#x3D; 0; i &lt; this.portNames.Length; i++)\n                &#123;\n                    this.serialPorts.Add(new SerialPort(this.portNames[i]));\n                &#125;\n            &#125;\n            this.comboBox1.Items.Clear();\n            this.comboBox2.Items.Clear();\n            this.comboBox1.Items.AddRange(this.portNames);\n            this.comboBox2.Items.AddRange(this.btl);\n            this.comboBox3.Items.AddRange(this.sjw );\n            this.comboBox4.Items.AddRange(this.tzw);\n            this.comboBox5.Items.AddRange(this.jy);\n \n            try\n            &#123;\n                \n                this.comboBox2.SelectedIndex &#x3D; 1;\n                this.comboBox3.SelectedIndex &#x3D; 0;\n                this.comboBox4.SelectedIndex &#x3D;0;\n                this.comboBox5.SelectedIndex &#x3D; 0;\n                this.comboBox1.SelectedIndex &#x3D; 0;\n            &#125;\n            catch(Exception eio)\n            &#123;\n \n            &#125;\n            \n        &#125;</code></pre>\n<p>点击开启按钮时从选择框当前选中项的名称从上次实例化的串口对象列表里获取当前选中的串口对象，然后打开串口，代码如下：</p>\n<pre class=\"line-numbers language-c#\" data-language=\"c#\"><code class=\"language-c#\">private void button1_Click(object sender, EventArgs e)\n        &#123;\n            &#x2F;&#x2F;ms.My_send(&quot;abcd&quot;);\n            if (button1.Text.Equals(&quot;开启&quot;))\n            &#123;\n                try\n                &#123;\n                    this.serialPort1.PortName &#x3D; this.comboBox1.SelectedItem.ToString();\n                    Console.WriteLine(this.serialPort1.PortName);\n                    if (this.serialPort1.IsOpen)\n                    &#123;\n                        MessageBox.Show(&quot;串口被占用！&quot;);\n                        return;\n                    &#125;\n                    else\n                    &#123;\n                        this.serialPort1.BaudRate &#x3D;int.Parse(this.comboBox2.SelectedItem.ToString());\n                        this.serialPort1.DataBits &#x3D; int.Parse(this.comboBox3.SelectedItem.ToString());\n                        this.serialPort1.Parity &#x3D; Parity.None;\n                        this.serialPort1.StopBits &#x3D; StopBits.One;\n                        this.serialPort1.Open();\n                        this.button1.Text &#x3D; &quot;关闭&quot;;\n                    &#125;\n                &#125;\n                catch (Exception eio)\n                &#123;\n                    MessageBox.Show(&quot;出现异常：&quot;+eio.Message);\n                &#125;\n            &#125;\n            else if (button1.Text.Equals(&quot;关闭&quot;))\n            &#123;\n                this.serialPort1.Close();\n                this.button1.Text &#x3D; &quot;开启&quot;;\n            &#125;\n        &#125;</code></pre>\n<p>当开启串口后，在串口接收事件中根据卖家提供的说明进行数据的接收处理，代码如下：</p>\n<pre class=\"line-numbers language-c#\" data-language=\"c#\"><code class=\"language-c#\">private void serialPort1_DataReceived(object sender, SerialDataReceivedEventArgs e)\n        &#123;\n            &#x2F;&#x2F;Thread.Sleep(50);\n            int n &#x3D; serialPort1.BytesToRead;&#x2F;&#x2F;先记录下来，避免丢失\n            byte[] buf &#x3D; new byte[n];\n            serialPort1.Read(buf, 0, n);&#x2F;&#x2F;读取缓冲区数据\n            if (n &#x3D;&#x3D; 12)\n            &#123;\n                switch (buf[0])\n                &#123;\n                    case 0x01: &#123;\n                            wendu_1 &#x3D; (buf[1] - 0x30) * 10 + (buf[2] - 0x30);\n                            shidu_1&#x3D;(buf[3]-0x30)*10+ (buf[4] - 0x30);\n                            guangzhao_1&#x3D; (buf[5] - 0x30) * 100 + (buf[6] - 0x30)*10 + (buf[7] - 0x30);\n                            this.label6.Text &#x3D; &quot;节点1：温度：&quot; + wendu_1.ToString() + &quot;℃；湿度：&quot; + shidu_1.ToString() + &quot;％；光照：&quot;+guangzhao_1.ToString();\n                        &#125;\n                        break;\n                    case 0x02:\n                        &#123;\n                            wendu_2 &#x3D; (buf[1] - 0x30) * 10 + (buf[2] - 0x30);\n                            shidu_2 &#x3D; (buf[3] - 0x30) * 10 + (buf[4] - 0x30);\n                            guangzhao_2 &#x3D; (buf[5] - 0x30) * 100 + (buf[6] - 0x30) * 10 + (buf[7] - 0x30);\n                            this.label7.Text &#x3D; &quot;节点2：温度：&quot; + wendu_2.ToString() + &quot;℃；湿度：&quot; + shidu_2.ToString() + &quot;％；光照：&quot; + guangzhao_2.ToString();\n                        &#125;\n                        break;\n                    case 0x03:\n                        &#123;\n                            wendu_3 &#x3D; (buf[1] - 0x30) * 10 + (buf[2] - 0x30);\n                            shidu_3 &#x3D; (buf[3] - 0x30) * 10 + (buf[4] - 0x30);\n                            guangzhao_3 &#x3D; (buf[5] - 0x30) * 100 + (buf[6] - 0x30) * 10 + (buf[7] - 0x30);\n                            this.label8.Text &#x3D; &quot;节点3：温度：&quot; + wendu_3.ToString() + &quot;℃；湿度：&quot; + shidu_3.ToString() + &quot;％；光照：&quot; + guangzhao_3.ToString();\n                        &#125;\n                        break;\n                &#125;\n            &#125;\n            &#x2F;*遍历收到的字节\n            foreach (byte b in buf)\n            &#123;\n                Console.WriteLine(b.ToString(&quot;X2&quot;) + &quot; &quot;);\n            &#125;\n            *&#x2F;\n        &#125;</code></pre>\n<p>上面这是串口数据的接收处理部分，下面来说一下websocket服务端的实现，这个就比较简单了，使用C#的websocketsharp库，根据说明，先写了一个自己的类继承了WebSocketBehavior，然后初始化websocket服务器，初始化就三句代码：</p>\n<pre class=\"line-numbers language-c#\" data-language=\"c#\"><code class=\"language-c#\">WebSocketServer _ws &#x3D; new WebSocketServer(1234);\n_ws.AddWebSocketService&lt;MyWs&gt;(&quot;&#x2F;cshnet&quot;);\n_ws.Start();</code></pre>\n<p>因为服务端是被动发送，当js端请求时才会发送数据，所以仅仅重写了OnMessage方法，具体代码如下：</p>\n<pre class=\"line-numbers language-c#\" data-language=\"c#\"><code class=\"language-c#\">using MyApp;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing WebSocketSharp;\nusing WebSocketSharp.Server;\n \npublic class MyWs : WebSocketBehavior\n&#123;\n    protected override void OnMessage(MessageEventArgs e)\n    &#123;\n        &#x2F;&#x2F;JsonConvert.SerializeObject();\n \n        Console.WriteLine(e.Data);\n        Sessions.Broadcast(Encoding.UTF8.GetBytes(&quot;&#123;\\&quot;temperature1\\&quot;:&quot;+Form1.wendu_1.ToString()+ &quot;,\\&quot;temperature2\\&quot;:&quot; + Form1.wendu_2.ToString() + &quot;,\\&quot;temperature3\\&quot;:&quot; + Form1.wendu_3.ToString() + &quot;,\\&quot;Illumination1\\&quot;:&quot; + Form1.guangzhao_1.ToString() + &quot;,\\&quot;Illumination2\\&quot;:&quot; + Form1.guangzhao_2.ToString() + &quot;,\\&quot;Illumination3\\&quot;:&quot; + Form1.guangzhao_3.ToString() + &quot;,\\&quot;humidity1\\&quot;:&quot; + Form1.shidu_1.ToString() + &quot;,\\&quot;humidity2\\&quot;:&quot; + Form1.shidu_2.ToString() + &quot;,\\&quot;humidity3\\&quot;:&quot; + Form1.shidu_3.ToString() + &quot;,\\&quot;date\\&quot;:\\&quot;&quot; + DateTime.Now.ToLongTimeString().ToString() + &quot;\\&quot;&#125;&quot;));\n    &#125;\n    protected override void OnOpen()\n    &#123;\n        &#x2F;&#x2F;Console.WriteLine(Sessions.ActiveIDs);\n    &#125;\n \n    public static void My_send(String data)\n    &#123;\n        &#x2F;*\n        foreach (string i in Sessions.IDs)&#123;\n            Sessions.SendTo(Convert.FromBase64String(data), i);\n        &#125;*&#x2F;\n        &#x2F;&#x2F;Sessions.Broadcast(Encoding.UTF8.GetBytes(data));\n        &#x2F;&#x2F;WebSocketBehavior.Sessions.Broadcast(Encoding.UTF8.GetBytes(data));\n    &#125;\n \n \n&#125;</code></pre>\n<p>上面就是上位机软件的实现方法，下面来说一下数据可视化的部分，首先下载echarts库，页面写几个div就不用管了，直接实现js代码即可，因为客户端是主动的，所以用了一个定时器，每隔一段时间从websocket服务端获取数据，通过websocket接受函数，将数据存到缓冲区，然后使用echarts的setOption方法更新数据，具体代码如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">var num &#x3D; 50; &#x2F;&#x2F;要展示的数据量\nvar time &#x3D; 1500; &#x2F;&#x2F;数据更新时间ms\nvar connection_flag &#x3D; false;\nvar data &#x3D; &#123;\n    date: [],\n    temperature1: [],\n    temperature2: [],\n    temperature3: [],\n \n    Illumination1: [],\n    Illumination2: [],\n    Illumination3: []\n \n    &#x2F;&#x2F;hum1:0 ,\n    &#x2F;&#x2F;hum2:0 ,\n    &#x2F;&#x2F;hum3:0    \n&#125;;\nvar hum1&#x3D;0,hum2&#x3D;0,hum3&#x3D;0;\nvar options &#x3D; &#123;\n    Tem_options: &#123;\n        title: &#123;\n            text: &#39;各节点温度变化&#39;,\n            &#x2F;&#x2F;left: &#39;center&#39;\n        &#125;,\n        tooltip: &#123;&#125;,\n        legend: &#123;\n            data: [&#39;节点一&#39;, &#39;节点二&#39;, &#39;节点三&#39;]\n        &#125;,\n        xAxis: &#123;\n            type: &#39;category&#39;,\n            boundaryGap: false,\n            data: data.date\n        &#125;,\n        yAxis: &#123;\n            boundaryGap: [0, &#39;50%&#39;],\n            type: &#39;value&#39;\n        &#125;,\n        series: [&#123;\n            name: &quot;节点一&quot;,\n            type: &#39;line&#39;,\n \n            data: data.temperature1\n        &#125;, &#123;\n            name: &quot;节点二&quot;,\n            type: &#39;line&#39;,\n            data: data.temperature2\n        &#125;, &#123;\n            name: &quot;节点三&quot;,\n            type: &#39;line&#39;,\n            data: data.temperature3\n        &#125;]\n \n    &#125;,\n \n    Ill_options: &#123;\n        title: &#123;\n            text: &#39;各节点光照变化&#39;,\n            &#x2F;&#x2F;left: &#39;center&#39;\n        &#125;,\n        tooltip: &#123;&#125;,\n        legend: &#123;\n            data: [&#39;节点一&#39;, &#39;节点二&#39;, &#39;节点三&#39;]\n        &#125;,\n        xAxis: &#123;\n            type: &#39;category&#39;,\n            boundaryGap: false,\n            data: data.date\n        &#125;,\n        yAxis: &#123;\n            boundaryGap: [0, &#39;50%&#39;],\n            type: &#39;value&#39;\n        &#125;,\n        series: [&#123;\n            name: &quot;节点一&quot;,\n            type: &#39;line&#39;,\n \n            data: data.Illumination1\n        &#125;, &#123;\n            name: &quot;节点二&quot;,\n            type: &#39;line&#39;,\n            data: data.Illumination2\n        &#125;, &#123;\n            name: &quot;节点三&quot;,\n            type: &#39;line&#39;,\n            data: data.Illumination3\n        &#125;]\n \n    &#125;,\n \n    Hum1_options:&#123;\n        tooltip: &#123;\n            formatter: &#39;&#123;a&#125; &lt;br&#x2F;&gt;&#123;b&#125; : &#123;c&#125;%&#39;\n        &#125;,\n        toolbox: &#123;\n            feature: &#123;\n                restore: &#123;&#125;,\n                saveAsImage: &#123;&#125;\n            &#125;\n        &#125;,\n        series: [\n            &#123;\n                name: &#39;节点一&#39;,\n                type: &#39;gauge&#39;,\n                detail: &#123;formatter: &#39;&#123;value&#125;%&#39;&#125;,\n                data: [&#123;value: hum1, name: &#39;湿度1&#39;&#125;]\n            &#125;\n        ]\n    &#125;,\n \n    Hum2_options:&#123;\n        tooltip: &#123;\n            formatter: &#39;&#123;a&#125; &lt;br&#x2F;&gt;&#123;b&#125; : &#123;c&#125;%&#39;\n        &#125;,\n        toolbox: &#123;\n            feature: &#123;\n                restore: &#123;&#125;,\n                saveAsImage: &#123;&#125;\n            &#125;\n        &#125;,\n        series: [\n            &#123;\n                name: &#39;节点二&#39;,\n                type: &#39;gauge&#39;,\n                detail: &#123;formatter: &#39;&#123;value&#125;%&#39;&#125;,\n                data: [&#123;value: hum2, name: &#39;湿度2&#39;&#125;]\n            &#125;\n        ]\n    &#125;,\n \n    Hum3_options:&#123;\n        tooltip: &#123;\n            formatter: &#39;&#123;a&#125; &lt;br&#x2F;&gt;&#123;b&#125; : &#123;c&#125;%&#39;\n        &#125;,\n        toolbox: &#123;\n            feature: &#123;\n                restore: &#123;&#125;,\n                saveAsImage: &#123;&#125;\n            &#125;\n        &#125;,\n        series: [\n            &#123;\n                name: &#39;节点三&#39;,\n                type: &#39;gauge&#39;,\n                detail: &#123;formatter: &#39;&#123;value&#125;%&#39;&#125;,\n                data: [&#123;value: hum3, name: &#39;湿度3&#39;&#125;]\n            &#125;\n        ]\n    &#125;\n \n&#125;;\n \nfunction update_value(value) &#123;\n    for (i in data) &#123;\n        if (data[i].length &gt;&#x3D; num) &#123;\n            for (j &#x3D; 0; j &lt; num - 1; j++) &#123;\n                data[i][j] &#x3D; data[i][j + 1];\n            &#125;\n            if (i &#x3D;&#x3D; &#39;date&#39;) data[i][num - 1] &#x3D; value[i];&#x2F;&#x2F;.slice(11)\n            else data[i][num - 1] &#x3D; value[i];\n        &#125; else &#123;\n            if (i &#x3D;&#x3D; &#39;date&#39;) data[i].push(value[i]);&#x2F;&#x2F;.slice(11)\n            else data[i].push(value[i]);\n        &#125;\n        &#x2F;&#x2F;data.hum1&#x3D;value[&quot;humidity1&quot;];\n        &#x2F;&#x2F;data.hum2&#x3D;value[&quot;humidity2&quot;];\n        &#x2F;&#x2F;data.hum3&#x3D;value[&quot;humidity3&quot;];\n    &#125;\n    options.Hum1_options.series[0].data[0].value&#x3D;value[&quot;humidity1&quot;];\n    options.Hum2_options.series[0].data[0].value&#x3D;value[&quot;humidity2&quot;];\n    options.Hum3_options.series[0].data[0].value&#x3D;value[&quot;humidity3&quot;];\n    &#x2F;*\n    hum1&#x3D;value[&quot;humidity1&quot;];\n    hum2&#x3D;value[&quot;humidity2&quot;];\n    hum3&#x3D;value[&quot;humidity3&quot;];\n    *&#x2F;\n    Tem_echarts.setOption(options.Tem_options);\n    Ill_echarts.setOption(options.Ill_options);\n \n    Hum_echarts1.setOption(options.Hum1_options);\n    Hum_echarts2.setOption(options.Hum2_options);\n    Hum_echarts3.setOption(options.Hum3_options);\n&#125;\nif (&quot;WebSocket&quot; in window) &#123;\n    &#x2F;&#x2F;alert(&quot;您的浏览器支持 WebSocket!&quot;);\n \n    &#x2F;&#x2F; 打开一个 web socket\n    var ws &#x3D; new WebSocket(&quot;ws:&#x2F;&#x2F;localhost:1234&#x2F;cshnet&quot;);\n \n    ws.onopen &#x3D; function() &#123;\n        &#x2F;&#x2F; Web Socket 已连接上，使用 send() 方法发送数据\n        &#x2F;&#x2F;ws.send(&quot;get&quot;);\n        &#x2F;&#x2F;alert(&quot;数据发送中...&quot;);\n        connection_flag &#x3D; true;\n    &#125;;\n \n    ws.onmessage &#x3D; function(evt) &#123;\n        var recv_value &#x3D; evt.data;\n        var reader &#x3D; new FileReader();\n        reader.readAsText(recv_value, &#39;utf-8&#39;);\n        reader.onload &#x3D; function(event)&#123;\n            var content &#x3D; reader.result;&#x2F;&#x2F;内容就在这里\n            console.log(JSON.parse(content));\n            update_value(JSON.parse(content))\n        &#125;;\n        \n    &#125;;\n \n    ws.onclose &#x3D; function() &#123;\n        &#x2F;&#x2F; 关闭 websocket\n        connection_flag &#x3D; false;\n        alert(&quot;连接已关闭...&quot;);\n    &#125;;\n&#125; else &#123;\n    &#x2F;&#x2F; 浏览器不支持 WebSocket\n    alert(&quot;您的浏览器不支持,请更换浏览器！&quot;);\n&#125;\n \n \n \nsetInterval(get_value, time);\n \n \nfunction get_value() &#123;\n    if (connection_flag) &#123;\n        ws.send(&#39;get&#39;);\n    &#125;\n \n&#125;</code></pre>\n<p>嗯。。。基本上已经完成了，C#的一些初始化以及布局代码就不贴了，额，有点乱，如果有需要的话可以留言，反正核心代码已经贴出来了，最后再贴一下HTML吧，貌似也没必要，不过还是贴一下吧</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n \n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;\n    &lt;title&gt;基于Zgbee的光照温湿度检测系统设计&lt;&#x2F;title&gt;\n    &lt;!-- 引入 echarts.js --&gt;\n    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;.&#x2F;echarts.min.js&quot;&gt;&lt;&#x2F;script&gt;\n    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;.&#x2F;my_js.js&quot;&gt;&lt;&#x2F;script&gt;\n&lt;&#x2F;head&gt;\n \n&lt;body&gt;\n    &lt;div class&#x3D;&quot;main_div&quot;&gt;\n        &lt;!--温度--&gt;\n        &lt;div id&#x3D;&quot;div_Tem&quot; style&#x3D;&quot;width: calc(40%);height:300px;float:left;margin-left: 5%;&quot;&gt;&lt;&#x2F;div&gt;\n        &lt;!--光照情况--&gt;\n        &lt;div id&#x3D;&quot;div_Ill&quot; style&#x3D;&quot;width: calc(40%);height:300px;float:left;margin-left: 10%;&quot;&gt;&lt;&#x2F;div&gt;\n        &lt;!--湿度--&gt;\n        &lt;div id&#x3D;&quot;div_Hum1&quot; style&#x3D;&quot;width: calc(33%);height:300px;float:left;&quot;&gt;&lt;&#x2F;div&gt;\n        &lt;div id&#x3D;&quot;div_Hum2&quot; style&#x3D;&quot;width: calc(33%);height:300px;float:left;&quot;&gt;&lt;&#x2F;div&gt;\n        &lt;div id&#x3D;&quot;div_Hum3&quot; style&#x3D;&quot;width: calc(33%);height:300px;float:left;&quot;&gt;&lt;&#x2F;div&gt;\n        \n        \n \n    &lt;&#x2F;div&gt;\n \n \n \n \n    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n        var Tem_echarts &#x3D; echarts.init(document.getElementById(&#39;div_Tem&#39;));\n \n        var Hum_echarts1 &#x3D; echarts.init(document.getElementById(&#39;div_Hum1&#39;));\n        var Hum_echarts2 &#x3D; echarts.init(document.getElementById(&#39;div_Hum2&#39;));\n        var Hum_echarts3 &#x3D; echarts.init(document.getElementById(&#39;div_Hum3&#39;));\n \n        var Ill_echarts &#x3D; echarts.init(document.getElementById(&#39;div_Ill&#39;));\n \n        Tem_echarts.setOption(options.Tem_options);\n        Ill_echarts.setOption(options.Ill_options);\n \n        Hum_echarts1.setOption(options.Hum1_options);\n        Hum_echarts2.setOption(options.Hum2_options);\n        Hum_echarts3.setOption(options.Hum3_options);\n        \n    &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n \n&lt;&#x2F;html&gt;</code></pre>\n<p>好了，到这里这个东西已经完善了，最后附一下成果图吧。。。</p>\n","text":"这是一个帮一个学姐完善的毕业设计，由于她之前找人做的时候一次性付清了钱，导致后来导师要求加功能的时候卖家不理人，所以有了此文章(博客迁移，图不见了～)，来说一下...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"16 mins."},"categories":[{"name":"开发","slug":"开发","count":4,"path":"api/categories/开发.json"},{"name":"硬件","slug":"开发/硬件","count":2,"path":"api/categories/开发/硬件.json"},{"name":"硬件","slug":"硬件","count":2,"path":"api/categories/硬件.json"},{"name":"数据可视化","slug":"开发/数据可视化","count":1,"path":"api/categories/开发/数据可视化.json"},{"name":"物联网","slug":"硬件/物联网","count":1,"path":"api/categories/硬件/物联网.json"}],"tags":[{"name":"C#","slug":"C","count":2,"path":"api/tags/C.json"},{"name":"物联网","slug":"物联网","count":1,"path":"api/tags/物联网.json"},{"name":"数据可视化","slug":"数据可视化","count":1,"path":"api/tags/数据可视化.json"},{"name":"echarts","slug":"echarts","count":1,"path":"api/tags/echarts.json"}],"toc":"","author":{"name":"Pa2sw0rd","slug":"blog-author","avatar":"http://static.pa2sw0rd.cn/static/images/pa2sw0rd.webp","link":"/","description":"一位正在重塑知识的技术人 <br /> @ <b>公众号：Pa2sw0rd</b>","socials":{"github":"https://github.com/Pa2sw0rd","twitter":"https://twitter.com/pa2sword","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://live.bilibili.com/22619211"},"douyin":{"icon":"/svg/douyin.svg","link":"https://www.douyin.com/user/MS4wLjABAAAA-Ohh-uecs-fV_2dHQpkNPD8KUHel_Mzuok9jyxBAJmM"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"C4D python使用第三方库","uid":"399c080512ffd5c4a1241cf968e7b025","slug":"c4d-use-python-other-library","date":"2020-07-30T13:46:53.000Z","updated":"2023-08-27T15:45:23.908Z","comments":true,"path":"api/articles/c4d-use-python-other-library.json","keywords":null,"cover":"https://images.unsplash.com/photo-1658474598480-74daa87936af?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxfDB8MXxyYW5kb218MHx8fHx8fHx8MTY5MzE0ODU1OQ&ixlib=rb-4.0.3&q=80&w=1080","text":"最近想做一个用硬件控制3d对象的demo，打算使用c4d，了解了一下C4D的python脚本，发现这方面的资料国内挺少的，最头疼的问题是不知道如何安装库，我们一...","link":"","photos":[],"count_time":{"symbolsCount":491,"symbolsTime":"1 mins."},"categories":[{"name":"记录","slug":"记录","count":2,"path":"api/categories/记录.json"},{"name":"环境配置","slug":"记录/环境配置","count":1,"path":"api/categories/记录/环境配置.json"}],"tags":[{"name":"python","slug":"python","count":1,"path":"api/tags/python.json"},{"name":"C4D","slug":"C4D","count":1,"path":"api/tags/C4D.json"}],"author":{"name":"Pa2sw0rd","slug":"blog-author","avatar":"http://static.pa2sw0rd.cn/static/images/pa2sw0rd.webp","link":"/","description":"一位正在重塑知识的技术人 <br /> @ <b>公众号：Pa2sw0rd</b>","socials":{"github":"https://github.com/Pa2sw0rd","twitter":"https://twitter.com/pa2sword","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://live.bilibili.com/22619211"},"douyin":{"icon":"/svg/douyin.svg","link":"https://www.douyin.com/user/MS4wLjABAAAA-Ohh-uecs-fV_2dHQpkNPD8KUHel_Mzuok9jyxBAJmM"}}}}},"next_post":{"title":"记一次任意用户密码修改漏洞","uid":"bd1e536e6f629d63f249e64bcb6082d0","slug":"change-any-user-passwd","date":"2020-07-28T06:45:41.000Z","updated":"2023-08-27T14:43:21.187Z","comments":true,"path":"api/articles/change-any-user-passwd.json","keywords":null,"cover":"https://images.unsplash.com/photo-1691522949910-28fcfb326904?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxfDB8MXxyYW5kb218MHx8fHx8fHx8MTY5MzE0NzIwMQ&ixlib=rb-4.0.3&q=80&w=1080","text":"这是一个学校的固定资产管理系统登录页面，尝试几个弱口令未遂，发现有验证码，爆破不是很有可能，决定从前端分析(迁移博客，图片丢失～) 当在输入工号后点击其它地方，...","link":"","photos":[],"count_time":{"symbolsCount":923,"symbolsTime":"1 mins."},"categories":[{"name":"安全","slug":"安全","count":7,"path":"api/categories/安全.json"},{"name":"web","slug":"安全/web","count":1,"path":"api/categories/安全/web.json"},{"name":"web","slug":"web","count":1,"path":"api/categories/web.json"}],"tags":[{"name":"web漏洞","slug":"web漏洞","count":1,"path":"api/tags/web漏洞.json"}],"author":{"name":"Pa2sw0rd","slug":"blog-author","avatar":"http://static.pa2sw0rd.cn/static/images/pa2sw0rd.webp","link":"/","description":"一位正在重塑知识的技术人 <br /> @ <b>公众号：Pa2sw0rd</b>","socials":{"github":"https://github.com/Pa2sw0rd","twitter":"https://twitter.com/pa2sword","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://live.bilibili.com/22619211"},"douyin":{"icon":"/svg/douyin.svg","link":"https://www.douyin.com/user/MS4wLjABAAAA-Ohh-uecs-fV_2dHQpkNPD8KUHel_Mzuok9jyxBAJmM"}}}}}}